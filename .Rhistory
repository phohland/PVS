The hRELSA was not calculated.")
abort <- TRUE
}
# Warnings leading to no abort
if (is.null(data_seperation) && data_ending %in% c("csv", "txt")) {
data_seperation <- ","
cat("While processing the inserted csv file the assumption that the data is
seperated with a ',' has been made.
If the file is not seperated that way, please use: data_seperation = ''.\n")
}
if (is.null(data_decimal) && data_ending %in% c("csv", "txt")) {
data_decimal <- "."
cat("While processing the inserted csv file the assumption that the data
decimal seperation is '.' has been made.
If the decimal seperation is not that way, please use: data_decimal = '.'.\n")
}
if (is.null(data_sheet) && data_ending %in% c("xls", "xlsx")) {
data_sheet <- 1
cat("While processing the inserted excel file the assumption that the data
is in sheet 1 has been made.
If the data is in another sheet, please use e.g.: data_sheet = 2.\n")
}
if (!(is.null(day)) && !(is.null(form_to_day))) {
warning("You can't form a day column if you already have one. Your own day
column has been used.")
form_to_day <- NULL
new_day_one <- NULL
}
if (is.null(new_day_one) && !(is.null(form_to_day))) {
new_day_one <- TRUE
cat("While processing the inserted time column the assumption that each
patient should get a new day one at his first time point has been made.
If only one day one at the earliest time point of the data set is wished,
please use: new_day_one = FALSE.\n")
}
if (is.null(day_format) && !(is.null(form_to_day))) {
day_format <- "%d%b%Y"
cat("While processing the inserted time column the assumption that the date
format is %d%b%Y has been made. If the format is otherwise,
please use: day_format = ''.\n")
}
if (is.null(k) && !(is.null(levels))) {
k <- 4
cat("You want the levels to be given out as well and did not stated the amount
of the k levels. While processing the levels k = 4 was used.
If wished otherwise, please use e.g.: k = 5.\n")
}
# Function code -----------------------------------------------------------
if (abort) {
} else {
if (data_ending %in% c("csv", "txt")) {
raw <- read.csv(data_path, sep = data_seperation, header = TRUE, dec = data_decimal, row.names = NULL)
} else if (data_ending == "xlsx" || data_ending == "xls") {
raw <- read_excel(data_path, sheet = data_sheet)
}
raw <- as_tibble(raw)
raw <- raw %>% clean_names
col_id <- which(names(raw) == id)
colnames(raw)[col_id] <- "id"
if (is.null(day)) {
raw <- hrelsa_days(raw, format = "day", date_format = day_format, formthis = form_to_day, newdayone = new_day_one)
day <- "day"
}
dat <- hrelsa_format(raw, id = id, treatment = treatment, condition = condition, day = day, vars = vars)
pre <- hrelsa_norm(dat, normthese = vars, zvars = zvars, ontime = norm_ontime)
bsl <- hrelsa_baselines(pre, bslday = baseline_day, vars = vars, zvars = zvars, turnvars = turnvars)
final <- hrelsa_final(pre, bsl, drop = dropvars, turnvars = turnvars, zvars = zvars)
analysis <- hrelsa_analysis(final)
if (levels) {
if (plot_instead_of_scree) {
levels_df <- hrelsa_levels(pre, bsl = bsl, drops = dropvars, turns = turnvars,
zvars = zvars,  k = k, showScree = FALSE, showPlot = TRUE)
cat("\nThe plot of the levels will be shown.")
} else {
levels_df <- hrelsa_levels(pre, bsl = bsl, drops = dropvars, turns = turnvars,
zvars = zvars,  k = k, showScree = TRUE, showPlot = FALSE)
cat("\nThe scree plot of the levels will be shown.")
}
}
ret <- list(baseline_informations = bsl,
final_hRelsa = final,
analysis = analysis)
if (levels) {
ret <- append(ret, list(levels = levels_df))
}
if (!(is.null(which_patient)) && levels) {
hRELSA <-   hrelsa(pre = pre, bsl, a = which_patient, drop = dropvars, turnvars = turnvars, zvars = zvars)
ret <- append(ret, list(plot = list(
dat = dat,
hRELSA = hRELSA,
levels = levels_df,
a = which_patient,
plotvar = which_var_to_plot
)))
}
cat("\nhRELSA calculation finished.")
return(ret)
}
}
data_sheet = "data/surgery.txt"
data_sheet = 1
data_path = "data/surgery.txt"
data_seperation = "\t"
raw <- read.csv(data_path, sep = data_seperation, header = TRUE, dec = data_decimal, row.names = NULL)
raw
head(raw)
names(raw)
raw <- as_tibble(raw)
library(tidyverse)
raw <- as_tibble(raw)
raw <- raw %>% clean_names
library(janitor)
raw <- as_tibble(raw)
raw <- raw %>% clean_names
col_id <- which(names(raw) == id)
colnames(raw)[col_id] <- "id"
raw
library(hRELSA)
dat <- hrelsa_format(raw, id = id, treatment = treatment, condition = condition, day = day, vars = vars)
raw
raw <- as_tibble(raw)
library(tidyverse)
library(janitor)
raw <- as_tibble(raw)
raw <- raw %>% clean_names
col_id <- which(names(raw) == id)
colnames(raw)[col_id] <- "id"
raw
dat <- hrelsa_format(raw, id = id, treatment = treatment, condition = condition, day = day, vars = vars)
id
c(id, treatment, condition, day, vars)
id <- "id"
treatment <- "treatment"
condition <- "condition"
day <- "day"
id = "id"
treatment = "treatment"
condition = "condition"
day = "day"
vars = c("bwc","burON", "hr", "hrv", "temp", "act")
turnvars = c("hr", "temp"),
turnvars = c("hr", "temp")
library(tidyverse)
library(janitor)
data_path = "data/surgery.txt"
data_seperation = "\t"
data_decimal = "."
raw <- read.csv(data_path, sep = data_seperation, header = TRUE, dec = data_decimal, row.names = NULL)
raw
raw <- as_tibble(raw)
raw <- raw %>% clean_names
col_id <- which(names(raw) == id)
colnames(raw)[col_id] <- "id"
raw
dat <- hrelsa_format(raw, id = id, treatment = treatment, condition = condition, day = day, vars = vars)
c(id, treatment, condition, day, vars)
(FALSE %in% (cols %in% names(dat)))
cols %in% names(dat)
cols
cols <- c(id, treatment, condition, day, vars)
cols
(FALSE %in% (cols %in% names(dat)))
names(dat)
cols %in% names(dat)
raw <- read.csv(data_path, sep = data_seperation, header = TRUE, dec = data_decimal, row.names = NULL)
raw <- as_tibble(raw)
#raw <- raw %>% clean_names
col_id <- which(names(raw) == id)
colnames(raw)[col_id] <- "id"
raw
dat <- hrelsa_format(raw, id = id, treatment = treatment, condition = condition, day = day, vars = vars)
pre <- hrelsa_norm(dat, normthese = vars, zvars = zvars, ontime = norm_ontime)
bsl <- hrelsa_baselines(pre, bslday = baseline_day, vars = vars, zvars = zvars, turnvars = turnvars)
zvars = NULL
bsl <- hrelsa_baselines(pre, bslday = baseline_day, vars = vars, zvars = zvars, turnvars = turnvars)
final <- hrelsa_final(pre, bsl, drop = dropvars, turnvars = turnvars, zvars = zvars)
library(hRELSA)
library(hRELSA)
# input file
data_path = "data/surgery.txt"
data_seperation = "\t"
data_decimal = "."
data_sheet = NULL
# data formation
id = "id"
treatment = "treatment"
condition = "condition"
day = "day"
form_to_day = NULL
day_format = NULL
new_day_one = NULL
vars = c("bwc","burON", "hr", "hrv", "temp", "act")
turnvars = c("hr", "temp")
zvars = NULL
dropvars = NULL
# normalization
norm_ontime = 1
baseline_day = -1
# levels
levels = TRUE
k = 4
plot_instead_of_scree = FALSE
#plot
which_patient = 1
which_var_to_plot = c("hr")
# input file
data_path = "data/surgery.txt"
data_seperation = "\t"
data_decimal = "."
data_sheet = NULL
# data formation
id = "id"
treatment = "treatment"
condition = "condition"
day = "day"
form_to_day = NULL
day_format = NULL
new_day_one = NULL
vars = c("bwc","burON", "hr", "hrv", "temp", "act")
turnvars = c("hr", "temp")
zvars = NULL
dropvars = NULL
# normalization
norm_ontime = 1
baseline_day = -1
# levels
levels = TRUE
k = 4
plot_instead_of_scree = FALSE
#plot
which_patient = 1
which_var_to_plot = c("hr")
if (data_ending %in% c("csv", "txt")) {
raw <- read.csv(data_path, sep = data_seperation, header = TRUE, dec = data_decimal, row.names = NULL)
} else if (data_ending == "xlsx" || data_ending == "xls") {
raw <- read_excel(data_path, sheet = data_sheet)
}
raw
raw <- as_tibble(raw)
library(tidyverse)
raw <- as_tibble(raw)
#raw <- raw %>% clean_names
col_id <- which(names(raw) == id)
colnames(raw)[col_id] <- "id"
raw
if (is.null(day)) {
raw <- hrelsa_days(raw, format = "day", date_format = day_format, formthis = form_to_day, newdayone = new_day_one)
day <- "day"
}
dat <- hrelsa_format(raw, id = id, treatment = treatment, condition = condition, day = day, vars = vars)
dat
raw
pre <- hrelsa_norm(dat, normthese = vars, zvars = zvars, ontime = norm_ontime)
pre
library(tidyverse)
# input file
data_path = "data/surgery.txt"
data_seperation = "\t"
data_decimal = "."
data_sheet = NULL
# data formation
id = "id"
treatment = "treatment"
condition = "condition"
day = "day"
form_to_day = NULL
day_format = NULL
new_day_one = NULL
vars = c("bwc","burON", "hr", "hrv", "temp", "act")
turnvars = c("hr", "temp")
zvars = NULL
dropvars = NULL
# normalization
norm_ontime = -1
baseline_day = -1
# levels
levels = TRUE
k = 4
plot_instead_of_scree = FALSE
#plot
which_patient = 1
which_var_to_plot = c("hr")
pre <- hrelsa_norm(dat, normthese = vars, zvars = zvars, ontime = norm_ontime)
pre
bsl <- hrelsa_baselines(pre, bslday = baseline_day, vars = vars, zvars = zvars, turnvars = turnvars)
bsl
final <- hrelsa_final(pre, bsl, drop = dropvars, turnvars = turnvars, zvars = zvars)
final
dat
dat
analysis <- hrelsa_analysis(final)
analysis
dat
dat %>% filter(day == 14)
dat %>% filter(day == 13)
dat
print(n = 200)
print(dat, n = 200)
final
library(hRELSA)
library(hRELSA)
hRELSA <- relsa_wrapper(
# input file
data_path = "data/txdata.csv",
data_seperation = ",",
data_decimal = ".",
data_sheet = NULL,
# data formation
id = "id",
treatment = "tx",
condition = "sex",
day = NULL,
form_to_day = "exam_date",
day_format = "%d%b%Y",
new_day_one = TRUE,
vars = c("sds_w", "sds_h", "sds_bmi", "sds_waist", "sds_wh_r", "sbp_sds", "dbp_sds"),
turnvars = NULL,
zvars = c("sds_w", "sds_h", "sds_bmi", "sds_waist", "sds_wh_r", "sbp_sds", "dbp_sds"),
dropvars = NULL,
# normalization
baseline_day = 1,
# levels
levels = TRUE,
k = 4,
plot_instead_of_scree = FALSE,
#plot
which_patient = 43,
which_var_to_plot = c("sbp_sds")
)
# Packages ----------------------------------------------------------------
pacman::p_load(ggplot2, readxl, devtools, tidyverse,janitor, dplyr, tools)
hRELSA <- relsa_wrapper(
# input file
data_path = "data/txdata.csv",
data_seperation = ",",
data_decimal = ".",
data_sheet = NULL,
# data formation
id = "id",
treatment = "tx",
condition = "sex",
day = NULL,
form_to_day = "exam_date",
day_format = "%d%b%Y",
new_day_one = TRUE,
vars = c("sds_w", "sds_h", "sds_bmi", "sds_waist", "sds_wh_r", "sbp_sds", "dbp_sds"),
turnvars = NULL,
zvars = c("sds_w", "sds_h", "sds_bmi", "sds_waist", "sds_wh_r", "sbp_sds", "dbp_sds"),
dropvars = NULL,
# normalization
baseline_day = 1,
# levels
levels = TRUE,
k = 4,
plot_instead_of_scree = FALSE,
#plot
which_patient = 43,
which_var_to_plot = c("sbp_sds")
)
plot <- hrelsa_plot(hRELSA$plot$dat, hRELSA$plot$hRELSA, levels = hRELSA$plot$levels, a = hRELSA$plot$a, plotvar = hRELSA$plot$plotvar, plothRELSA = TRUE,
myylim = c(-4, 4),  myYlim = c(0, 1), mypch = 1, mycol = "red", myXlab="days")
hRELSA <- relsa_wrapper(
# input file
data_path = "data/txdata.csv",
data_seperation = ",",
data_decimal = ".",
data_sheet = NULL,
# data formation
id = "id",
treatment = "tx",
condition = "sex",
day = NULL,
form_to_day = "exam_date",
day_format = "%d%b%Y",
new_day_one = TRUE,
vars = c("sds_w", "sds_h", "sds_bmi", "sds_waist", "sds_wh_r", "sbp_sds", "dbp_sds"),
turnvars = NULL,
zvars = c("sds_w", "sds_h", "sds_bmi", "sds_waist", "sds_wh_r", "sbp_sds", "dbp_sds"),
dropvars = NULL,
# normalization
baseline_day = 1,
# levels
levels = TRUE,
k = 4,
plot_instead_of_scree = FALSE,
#plot
which_patient = 43,
which_var_to_plot = c("sbp_sds")
)
hrelsa_plot(hRELSA$plot$dat, hRELSA$plot$hRELSA, levels = hRELSA$plot$levels, a = hRELSA$plot$a, plotvar = hRELSA$plot$plotvar, plothRELSA = TRUE,
myylim = c(-4, 4),  myYlim = c(0, 1), mypch = 1, mycol = "red", myXlab="days")
#' Plot hRELSA score and variables together
#'
#' The \code{hrelsa_plot} function visualizes the hRELSA score alone or in
#' combination with one of the variables.
#'
#' @param set data set
#' @param RELSA hRELSA object
#' @param levels k+1 levels from kmeans calculations (hrelsa_levels function)
#' @param a which unique patient in the set?
#' @param plotvar which variable shall be plotted (does not scale with hRELSA score)
#' @param plothRELSA plot the hRELSA score?
#' @param myylim custom y-axis limits (left axis)
#' @param myYlim custom y-axis limits (right axis)
#' @param mypch custom dot marker
#' @param mycol custom plot color
#' @param myXlab custom x-axis label
#'
#' @return \code{plotset} data.frame with not normalized values of unique patient
#'
#' @importFrom graphics plot abline mtext
#'
#' @export
#'
hrelsa_plot <-
function(set,
hRELSA,
levels = NULL,
a = 1,
plotvar = NULL,
plothRELSA = TRUE,
myylim = c(-4, 4),
myYlim = c(0, 2),
mypch = 1,
mycol = "red",
myXlab = "time point") {
# Searching for errors ----------------------------------------------------
abort <- FALSE
if (is.null(set)) {
warning("There was no data set found. The plot was not generated.")
abort <- TRUE
}
if (is.null(hRELSA)) {
warning("There was no hRELSA found. The plot was not generated.")
abort <- TRUE
}
if (a < 1 || a > (length(unique(set$id)))) {
warning("The unique patient id was invalid. The plot was not generated.")
abort <- TRUE
}
# Function code -----------------------------------------------------------
plotset    <- set[set$id == unique(set$id)[a],]
if (abort) {
} else {
hrelsatype  <- as.numeric(unlist(hRELSA$relsa$rms))
if (length(plotvar) != 0) {
plot(
plotset$day,
unlist(plotset[, which(names(plotset) == plotvar)]),
pch = mypch,
cex.axis = 1.2,
cex.lab = 1.2,
type = "b",
ylab = plotvar,
xlab = myXlab,
ylim = myylim
)
if (plothRELSA == TRUE) {
par(new = TRUE)
plot(
plotset$day,
hrelsatype,
type = "b",
lwd = 2,
xaxt = "n",
yaxt = "n",
ylab = "",
xlab = "",
col = mycol,
ylim = myYlim,
pch = mypch
)
axis(side = 4)
mtext("hRELSA Score", side = 4, line = 3)
# write level lines to plot
if (length(levels) == 0) {
} else{
for (l in 1:length(levels)) {
abline(h = levels[l],
lwd = 1,
lty = 2)
}
}
} else{
}
} else{
plot(
hRELSA$relsa$day ,
hrelsatype,
type = "b",
lwd = 2,
ylab = "hRELSA score",
cex.axis = 1.2,
cex.lab = 1.2,
xlab = myXlab,
col = mycol,
ylim = myYlim,
pch = mypch
)
# write level lines to plot
if (length(levels) == 0) {
} else{
for (l in 1:length(levels)) {
abline(h = levels[l],
lwd = 1,
lty = 2)
}
}
}
}
#return(hRELSA_plot)
}
