time = as.POSIXct(time, tz = "")
)
raw_hr <- read.csv("data/Heart_rate.csv", sep = ";", header = TRUE, dec = ".", row.names = NULL)
raw_hr <- as_tibble(raw_hr)
names(raw_hr)[2] <- "time"
raw_hr <- raw_hr %>%
clean_names %>%
select("pmid", "time", "heart_rate") %>%
mutate(
time = as.POSIXct(time, tz = "")
)
raw_master <- read.csv("data/Patient_master_data.csv", sep = ";", header = TRUE, dec = ".", row.names = NULL)
raw_master <- as_tibble(raw_master)
raw_master <- raw_master %>%
clean_names %>%
mutate(
date_of_birth = as.Date(date_of_birth)
)
raw_pulse <- read.csv("data/Pulse.csv", sep = ";", header = TRUE, dec = ".", row.names = NULL)
raw_pulse <- as_tibble(raw_pulse)
names(raw_pulse)[2] <- "time"
raw_pulse <- raw_pulse %>%
clean_names %>%
select("pmid", "time", "pulse") %>%
mutate(
time = as.POSIXct(time, tz = "")
)
raw_resp <- read.csv("data/Respiratory_rate.csv", sep = ";", header = TRUE, dec = ".", row.names = NULL)
raw_resp <- as_tibble(raw_resp)
names(raw_resp)[2] <- "time"
raw_resp <- raw_resp %>%
clean_names %>%
select("pmid", "time", "respiratory_rate") %>%
mutate(
time = as.POSIXct(time, tz = "")
)
raw_tom <- read.csv("data/Transcutaneous_oxygen_measurement.csv", sep = ";", header = TRUE, dec = ".", row.names = NULL)
raw_tom <- as_tibble(raw_tom)
names(raw_tom)[2] <- "time"
raw_tom <- raw_tom %>%
clean_names %>%
select("pmid", "time", "sa_o2") %>%
mutate(
time = as.POSIXct(time, tz = "")
)
length(raw_bp$time)
length(raw_temp$time)
length(raw_hr$time)
length(raw_pulse$time)
length(raw_resp$time)
length(raw_tom$time)
raw <- NULL
raw <- merge(raw_hr, raw_pulse, by = c("pmid", "time"), all.x = FALSE, all.y = FALSE)
raw <- merge(raw, raw_tom, by = c("pmid", "time"), all.x = TRUE, all.y = TRUE)
raw <- merge(raw, raw_resp, by = c("pmid", "time"), all.x = TRUE, all.y = TRUE)
raw <- merge(raw, raw_bp, by = c("pmid", "time"), all.x = TRUE, all.y = TRUE)
raw <- merge(raw, raw_temp, by = c("pmid", "time"), all.x = TRUE, all.y = TRUE)
raw <- as_tibble(raw)
raw <- raw %>% distinct(time, .keep_all = TRUE)
raw$treatment <- "measurement"
raw$condition <- "measurement"
names(raw)[1] <- "id"
# input file
data_path = NULL
data_seperation = NULL
data_decimal = NULL
data_sheet = NULL
raw = raw
# data formation
id = "pmid"
treatment = "measurement"
condition = "measurement"
day = NULL
form_to_day = "time"
day_format = NULL
form_day_into = "timecode"
new_day_one = TRUE
vars = c("heart_rate", "pulse", "sa_o2", "respiratory_rate", "bp_systolic", "bp_diastolic", "temperature")
turnvars = c("heart_rate", "pulse", "respiratory_rate", "bp_systolic", "bp_diastolic", "temperature")
zvars = NULL
dropvars = NULL
# normalization
baseline_day = 1
# levels
levels = FALSE
k = NULL
plot_instead_of_scree = TRUE
#plot
which_patient = 1
which_var_to_plot = "heart_rate"
abort <- FALSE
data_ending <- file_ext(data_path)
library(tidyverse)
library(janitor)
library(tools)
abort <- FALSE
data_ending <- file_ext(data_path)
just_one_condition <- FALSE
if (is.null(treatment) || is.null(condition)) {
just_one_condition <- TRUE
}
# Warnings leading to abort
if (is.null(data_path) && is.null(raw)) {
warning("There was no data path found. Please insert your data path including
the file ending in the following way: data_path = 'example_file.csv'.
The hRELSA was not calculated.")
abort <- TRUE
}
if (!(is.null(data_path))) {
if (!(file.exists(data_path))) {
warning("The inserted file was not found. Please insert your data path in the
following way: data_path = 'example_path'.
The hRELSA was not calculated.")
abort <- TRUE
}
}
if (!(data_ending %in% c("csv", "xls", "xlsx", "txt")) && is.null(raw)) {
warning("The inserted file has no csv-, txt-, xls- or xlsx-ending. A file with one
of those endings is necessairy.
The hRELSA was not calculated.")
abort <- TRUE
}
if (is.null(id)) {
warning("There was no id column name found. Please insert your id column name
in the following way: id = 'id'.
The hRELSA was not calculated.")
abort <- TRUE
}
if (is.null(treatment) && is.null(condition)) {
warning("There was neither a treatment nor a condition column name found.
Please insert at least one of them in the following way:
treatment = 'treatment'
or condition = 'condition'.
The hRELSA was not calculated.")
abort <- TRUE
}
if (is.null(day) && is.null(form_to_day)) {
warning("There was neither a day nor a column to form to a day column found.
Please insert at least one of them in the following way:
day = 'day'
or form_to_day = 'exam_date'.
The hRELSA was not calculated.")
abort <- TRUE
}
if (is.null(vars)) {
warning("There were no variable column names found. Please insert your variable column names
in the following way: vars = c('var1','var2').
The hRELSA was not calculated.")
abort <- TRUE
}
if (is.null(vars)) {
warning("There were no variable column names found. Please insert your variable column names
in the following way: vars = c('var1','var2').
The hRELSA was not calculated.")
abort <- TRUE
}
# Warnings leading to no abort
if (is.null(data_seperation) && data_ending %in% c("csv", "txt") && is.null(raw)) {
data_seperation <- ","
cat("While processing the inserted csv file the assumption that the data is
seperated with a ',' has been made.
If the file is not seperated that way, please use: data_seperation = ''.\n")
}
if (is.null(data_decimal) && data_ending %in% c("csv", "txt") && is.null(raw)) {
data_decimal <- "."
cat("While processing the inserted csv file the assumption that the data
decimal seperation is '.' has been made.
If the decimal seperation is not that way, please use: data_decimal = '.'.\n")
}
if (is.null(data_sheet) && data_ending %in% c("xls", "xlsx") && is.null(raw)) {
data_sheet <- 1
cat("While processing the inserted excel file the assumption that the data
is in sheet 1 has been made.
If the data is in another sheet, please use e.g.: data_sheet = 2.\n")
}
if (!(is.null(day)) && !(is.null(form_to_day))) {
warning("You can't form a day column if you already have one. Your own day
column has been used.")
form_to_day <- NULL
new_day_one <- NULL
}
if (is.null(new_day_one) && !(is.null(form_to_day))) {
new_day_one <- TRUE
cat("While processing the inserted time column the assumption that each
patient should get a new day one at his first time point has been made.
If only one day one at the earliest time point of the data set is wished,
please use: new_day_one = FALSE.\n")
}
if (is.null(day_format) && !(is.null(form_to_day)) && (is.null(form_day_into))) {
day_format <- "%d%b%Y"
cat("While processing the inserted time column the assumption that the date
format is %d%b%Y has been made. If the format is otherwise,
please use: day_format = ''.\n")
}
if (is.null(k) && !(is.null(levels))) {
k <- 4
cat("You want the levels to be given out as well and did not stated the amount
of the k levels. While processing the levels k = 4 was used.
If wished otherwise, please use e.g.: k = 5.\n")
}
abort <- FALSE
data_ending <- file_ext(data_path)
just_one_condition <- FALSE
if (is.null(treatment) || is.null(condition)) {
just_one_condition <- TRUE
}
# Warnings leading to abort
if (is.null(data_path) && is.null(raw)) {
warning("There was no data path found. Please insert your data path including
the file ending in the following way: data_path = 'example_file.csv'.
The hRELSA was not calculated.")
abort <- TRUE
}
if (!(is.null(data_path))) {
if (!(file.exists(data_path))) {
warning("The inserted file was not found. Please insert your data path in the
following way: data_path = 'example_path'.
The hRELSA was not calculated.")
abort <- TRUE
}
}
if (!(data_ending %in% c("csv", "xls", "xlsx", "txt")) && is.null(raw)) {
warning("The inserted file has no csv-, txt-, xls- or xlsx-ending. A file with one
of those endings is necessairy.
The hRELSA was not calculated.")
abort <- TRUE
}
if (is.null(id)) {
warning("There was no id column name found. Please insert your id column name
in the following way: id = 'id'.
The hRELSA was not calculated.")
abort <- TRUE
}
if (is.null(treatment) && is.null(condition)) {
warning("There was neither a treatment nor a condition column name found.
Please insert at least one of them in the following way:
treatment = 'treatment'
or condition = 'condition'.
The hRELSA was not calculated.")
abort <- TRUE
}
if (is.null(day) && is.null(form_to_day)) {
warning("There was neither a day nor a column to form to a day column found.
Please insert at least one of them in the following way:
day = 'day'
or form_to_day = 'exam_date'.
The hRELSA was not calculated.")
abort <- TRUE
}
if (is.null(vars)) {
warning("There were no variable column names found. Please insert your variable column names
in the following way: vars = c('var1','var2').
The hRELSA was not calculated.")
abort <- TRUE
}
if (is.null(vars)) {
warning("There were no variable column names found. Please insert your variable column names
in the following way: vars = c('var1','var2').
The hRELSA was not calculated.")
abort <- TRUE
}
# Warnings leading to no abort
if (is.null(data_seperation) && data_ending %in% c("csv", "txt") && is.null(raw)) {
data_seperation <- ","
cat("While processing the inserted csv file the assumption that the data is
seperated with a ',' has been made.
If the file is not seperated that way, please use: data_seperation = ''.\n")
}
if (is.null(data_decimal) && data_ending %in% c("csv", "txt") && is.null(raw)) {
data_decimal <- "."
cat("While processing the inserted csv file the assumption that the data
decimal seperation is '.' has been made.
If the decimal seperation is not that way, please use: data_decimal = '.'.\n")
}
if (is.null(data_sheet) && data_ending %in% c("xls", "xlsx") && is.null(raw)) {
data_sheet <- 1
cat("While processing the inserted excel file the assumption that the data
is in sheet 1 has been made.
If the data is in another sheet, please use e.g.: data_sheet = 2.\n")
}
if (!(is.null(day)) && !(is.null(form_to_day))) {
warning("You can't form a day column if you already have one. Your own day
column has been used.")
form_to_day <- NULL
new_day_one <- NULL
}
if (is.null(new_day_one) && !(is.null(form_to_day))) {
new_day_one <- TRUE
cat("While processing the inserted time column the assumption that each
patient should get a new day one at his first time point has been made.
If only one day one at the earliest time point of the data set is wished,
please use: new_day_one = FALSE.\n")
}
if (is.null(day_format) && !(is.null(form_to_day)) && (is.null(form_day_into))) {
day_format <- "%d%b%Y"
cat("While processing the inserted time column the assumption that the date
format is %d%b%Y has been made. If the format is otherwise,
please use: day_format = ''.\n")
}
if (is.null(k) && (levels)) {
k <- 4
cat("You want the levels to be given out as well and did not stated the amount
of the k levels. While processing the levels k = 4 was used.
If wished otherwise, please use e.g.: k = 5.\n")
}
if (is.null(raw)) {
if (data_ending %in% c("csv", "txt")) {
raw <- read.csv(data_path, sep = data_seperation, header = TRUE, dec = data_decimal, row.names = NULL)
} else if (data_ending == "xlsx" || data_ending == "xls") {
raw <- read_excel(data_path, sheet = data_sheet)
}
}
raw <- as_tibble(raw)
#raw <- raw %>% clean_names
col_id <- which(names(raw) == id)
colnames(raw)[col_id] <- "id"
if (is.null(day)) {
raw <- hrelsa_days(raw, format = form_day_into, date_format = day_format, formthis = form_to_day, newdayone = new_day_one)
day <- "day"
}
library(hRELSA)
if (is.null(day)) {
raw <- hrelsa_days(raw, format = form_day_into, date_format = day_format, formthis = form_to_day, newdayone = new_day_one)
day <- "day"
}
dat <- hrelsa_format(raw, id = id, treatment = treatment, condition = condition, day = day, vars = vars)
dat
cols <- c(id, treatment, condition, day, vars)
cols
library(hRELSA)
library(hRELSA)
library(tidyverse)
library(janitor)
library(tools)
# Data setup -------------------------------------------------------------
raw_bp <- read.csv("data/Blood_pressure_invasive.csv", sep = ";", header = TRUE, dec = ".", row.names = NULL)
raw_bp <- as_tibble(raw_bp)
names(raw_bp)[2] <- "time"
names(raw_bp)[3] <- "bp_systolic"
names(raw_bp)[4] <- "bp_diastolic"
raw_bp <- raw_bp %>%
clean_names %>%
mutate(
time = as.POSIXct(time, tz = "")
)
raw_temp <- read.csv("data/Body_Temperature.csv", sep = ";", header = TRUE, dec = ".", row.names = NULL)
raw_temp <- as_tibble(raw_temp)
names(raw_temp)[2] <- "time"
names(raw_temp)[3] <- "temperature"
raw_temp <- raw_temp %>%
clean_names %>%
select("pmid", "time", "temperature") %>%
mutate(
time = as.POSIXct(time, tz = "")
)
raw_hr <- read.csv("data/Heart_rate.csv", sep = ";", header = TRUE, dec = ".", row.names = NULL)
raw_hr <- as_tibble(raw_hr)
names(raw_hr)[2] <- "time"
raw_hr <- raw_hr %>%
clean_names %>%
select("pmid", "time", "heart_rate") %>%
mutate(
time = as.POSIXct(time, tz = "")
)
raw_master <- read.csv("data/Patient_master_data.csv", sep = ";", header = TRUE, dec = ".", row.names = NULL)
raw_master <- as_tibble(raw_master)
raw_master <- raw_master %>%
clean_names %>%
mutate(
date_of_birth = as.Date(date_of_birth)
)
raw_pulse <- read.csv("data/Pulse.csv", sep = ";", header = TRUE, dec = ".", row.names = NULL)
raw_pulse <- as_tibble(raw_pulse)
names(raw_pulse)[2] <- "time"
raw_pulse <- raw_pulse %>%
clean_names %>%
select("pmid", "time", "pulse") %>%
mutate(
time = as.POSIXct(time, tz = "")
)
raw_resp <- read.csv("data/Respiratory_rate.csv", sep = ";", header = TRUE, dec = ".", row.names = NULL)
raw_resp <- as_tibble(raw_resp)
names(raw_resp)[2] <- "time"
raw_resp <- raw_resp %>%
clean_names %>%
select("pmid", "time", "respiratory_rate") %>%
mutate(
time = as.POSIXct(time, tz = "")
)
raw_tom <- read.csv("data/Transcutaneous_oxygen_measurement.csv", sep = ";", header = TRUE, dec = ".", row.names = NULL)
raw_tom <- as_tibble(raw_tom)
names(raw_tom)[2] <- "time"
raw_tom <- raw_tom %>%
clean_names %>%
select("pmid", "time", "sa_o2") %>%
mutate(
time = as.POSIXct(time, tz = "")
)
length(raw_bp$time)
length(raw_temp$time)
length(raw_hr$time)
length(raw_pulse$time)
length(raw_resp$time)
length(raw_tom$time)
raw <- NULL
raw <- merge(raw_hr, raw_pulse, by = c("pmid", "time"), all.x = FALSE, all.y = FALSE)
raw <- merge(raw, raw_tom, by = c("pmid", "time"), all.x = TRUE, all.y = TRUE)
raw <- merge(raw, raw_resp, by = c("pmid", "time"), all.x = TRUE, all.y = TRUE)
raw <- merge(raw, raw_bp, by = c("pmid", "time"), all.x = TRUE, all.y = TRUE)
raw <- merge(raw, raw_temp, by = c("pmid", "time"), all.x = TRUE, all.y = TRUE)
raw <- as_tibble(raw)
raw <- raw %>% distinct(time, .keep_all = TRUE)
raw$treatment <- "measurement"
raw$condition <- "measurement"
names(raw)[1] <- "id"
# input file
data_path = NULL
data_seperation = NULL
data_decimal = NULL
data_sheet = NULL
raw = raw
# data formation
id = "pmid"
treatment = "measurement"
condition = "measurement"
day = NULL
form_to_day = "time"
day_format = NULL
form_day_into = "timecode"
new_day_one = TRUE
vars = c("heart_rate", "pulse", "sa_o2", "respiratory_rate", "bp_systolic", "bp_diastolic", "temperature")
turnvars = c("heart_rate", "pulse", "respiratory_rate", "bp_systolic", "bp_diastolic", "temperature")
zvars = NULL
dropvars = NULL
# normalization
baseline_day = 1
# levels
levels = FALSE
k = NULL
plot_instead_of_scree = TRUE
#plot
which_patient = 1
which_var_to_plot = "heart_rate"
if (is.null(raw)) {
if (data_ending %in% c("csv", "txt")) {
raw <- read.csv(data_path, sep = data_seperation, header = TRUE, dec = data_decimal, row.names = NULL)
} else if (data_ending == "xlsx" || data_ending == "xls") {
raw <- read_excel(data_path, sheet = data_sheet)
}
}
raw <- as_tibble(raw)
#raw <- raw %>% clean_names
col_id <- which(names(raw) == id)
colnames(raw)[col_id] <- "id"
id <- "id"
if (is.null(day)) {
raw <- hrelsa_days(raw, format = form_day_into, date_format = day_format, formthis = form_to_day, newdayone = new_day_one)
day <- "day"
}
raw
dat <- hrelsa_format(raw, id = id, treatment = treatment, condition = condition, day = day, vars = vars)
abort <- FALSE
if (is.null(dat)) {
warning("There was no data set found. The data set was not formatted.")
abort <- TRUE
}
if (is.null(id) || is.null(day)) {
warning("There was no id or day column found.
The data set was not formatted.")
abort <- TRUE
}
cols <- c(id, treatment, condition, day, vars)
if (FALSE %in% (cols %in% names(dat))) {
warning("One or more of the columns was not found in the data set.
The data set was not formatted.")
abort <- TRUE
}
cols
FALSE %in% (cols %in% names(dat))
(cols %in% names(dat))
cols
names(dat)
library(hRELSA)
library(hRELSA)
library(hRELSA)
library(hRELSA)
library(hRELSA)
library(hRELSA)
library(hRELSA)
library(hRELSA)
library(hRELSA)
library(hRELSA)
library(hRELSA)
library(hRELSA)
library(hRELSA)
library(hRELSA)
library(hRELSA)
library(hRELSA)
devtools::load_all(".")
library(hRELSA)
library(hRELSA)
library(hRELSA)
library(hRELSA)
library(hRELSA)
library(hRELSA)
library(hRELSA)
library(hRELSA)
library(hRELSA)
library(hRELSA)
library(hRELSA)
library(hRELSA)
library(hRELSA)
