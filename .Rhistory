warning("The inserted file was not found. Please insert your data path in the
following way: data_path = 'example_path'.
The hRELSA was not calculated.")
abort <- TRUE
}
if (!(data_ending %in% c("csv", "xls", "xlsx"))) {
warning("The inserted file has no csv-, xls- or xlsx-ending. A file with one
of those endings is necessairy.
The hRELSA was not calculated.")
abort <- TRUE
}
if (is.null(id)) {
warning("There was no id column name found. Please insert your id column name
in the following way: id = 'id'.
The hRELSA was not calculated.")
abort <- TRUE
}
if (is.null(treatment) && is.null(condition)) {
warning("There was neither a treatment nor a condition column name found.
Please insert at least one of them in the following way:
treatment = 'treatment'
or condition = 'condition'.
The hRELSA was not calculated.")
abort <- TRUE
}
if (is.null(day) && is.null(form_to_day)) {
warning("There was neither a day nor a column to form to a day column found.
Please insert at least one of them in the following way:
day = 'day'
or form_to_day = 'exam_date'.
The hRELSA was not calculated.")
abort <- TRUE
}
if (is.null(vars)) {
warning("There were no variable column names found. Please insert your variable column names
in the following way: vars = c('var1','var2').
The hRELSA was not calculated.")
abort <- TRUE
}
if (is.null(vars)) {
warning("There were no variable column names found. Please insert your variable column names
in the following way: vars = c('var1','var2').
The hRELSA was not calculated.")
abort <- TRUE
}
# Warnings leading to no abort
if (is.null(data_seperation) && data_ending == "csv") {
data_seperation <- ","
cat("While processing the inserted csv file the assumption that the data is
seperated with a ',' has been made.
If the file is not seperated that way, please use: data_seperation = ''.\n")
}
if (is.null(data_decimal) && data_ending == "csv") {
data_decimal <- "."
cat("While processing the inserted csv file the assumption that the data
decimal seperation is '.' has been made.
If the decimal seperation is not that way, please use: data_decimal = '.'.\n")
}
if (is.null(data_sheet) && data_ending %in% c("xls", "xlsx")) {
data_sheet <- 1
cat("While processing the inserted excel file the assumption that the data
is in sheet 1 has been made.
If the data is in another sheet, please use e.g.: data_sheet = 2.\n")
}
if (!(is.null(day)) && !(is.null(form_to_day))) {
warning("You can't form a day column if you already have one. Your own day
column has been used.")
form_to_day <- NULL
new_day_one <- NULL
}
if (is.null(new_day_one) && !(is.null(form_to_day))) {
new_day_one <- TRUE
cat("While processing the inserted time column the assumption that each
patient should get a new day one at his first time point has been made.
If only one day one at the earliest time point of the data set is wished,
please use: new_day_one = FALSE.\n")
}
if (is.null(day_format) && !(is.null(form_to_day))) {
day_format <- "%d%b%Y"
cat("While processing the inserted time column the assumption that the date
format is %d%b%Y has been made. If the format is otherwise,
please use: day_format = ''.\n")
}
if (is.null(k) && !(is.null(levels))) {
k <- 4
cat("You want the levels to be given out as well and did not stated the amount
of the k levels. While processing the levels k = 4 was used.
If wished otherwise, please use e.g.: k = 5.\n")
}
# Function code -----------------------------------------------------------
if (abort) {
} else {
if (data_ending == "csv") {
raw <- read.csv(data_path, sep = data_seperation, header = TRUE, dec = data_decimal, row.names = NULL)
} else if (data_ending == "xlsx" || data_ending == "xls") {
raw <- read_excel(data_path, sheet = data_sheet)
}
raw <- as_tibble(raw)
raw <- raw %>% clean_names
col_id <- which(names(raw) == id)
colnames(raw)[col_id] <- "id"
if (is.null(day)) {
raw <- hrelsa_days(raw, format = "day", date_format = day_format, formthis = form_to_day, newdayone = new_day_one)
day <- "day"
}
dat <- hrelsa_format(raw, id = id, treatment = treatment, condition = condition, day = day, vars = vars)
pre <- hrelsa_norm(dat, normthese = vars, zvars = zvars, ontime = norm_ontime)
bsl <- hrelsa_baselines(pre, bslday = baseline_day, vars = vars, zvars = zvars, turnvars = turnvars)
final <- hrelsa_final(pre, bsl, drop = dropvars, turnvars = turnvars, zvars = zvars)
analysis <- hrelsa_analysis(final)
if (levels) {
if (plot_instead_of_scree) {
levels_df <- hrelsa_levels(pre, bsl = bsl, drops = dropvars, turns = turnvars,
zvars = zvars,  k = k, showScree = FALSE, showPlot = TRUE)
cat("\nThe plot of the levels will be shown.")
} else {
levels_df <- hrelsa_levels(pre, bsl = bsl, drops = dropvars, turns = turnvars,
zvars = zvars,  k = k, showScree = TRUE, showPlot = FALSE)
cat("\nThe scree plot of the levels will be shown.")
}
}
ret <- list(baseline_informations = bsl,
final_hRelsa = final,
analysis = analysis)
if (levels) {
ret <- append(ret, list(levels = levels_df))
}
if (!(is.null(which_patient)) && levels) {
hRELSA <-   hrelsa(pre = pre, bsl, a = which_patient, drop = dropvars, turnvars = turnvars, zvars = zvars)
ret <- append(ret, list(plot = list(
dat = dat,
hRELSA = hRELSA,
levels = levels_df,
a = which_patient,
plotvar = which_var_to_plot
)))
}
cat("\nhRELSA calculation finished.")
return(ret)
}
}
hRELSA <- relsa_wrapper(
# input file
data_path = "data/txdata.csv",
data_seperation = ",",
data_decimal = ".",
data_sheet = NULL,
# data formation
id = "id",
treatment = "tx",
condition = "sex",
day = NULL,
form_to_day = "exam_date",
day_format = "%d%b%Y",
new_day_one = TRUE,
vars = c("sds_w", "sds_h", "sds_bmi", "sds_waist", "sds_wh_r", "sbp_sds", "dbp_sds"),
turnvars = NULL,
zvars = c("sds_w", "sds_h", "sds_bmi", "sds_waist", "sds_wh_r", "sbp_sds", "dbp_sds"),
dropvars = NULL,
# normalization
norm_ontime = 1,
baseline_day = 1,
# levels
levels = TRUE,
k = 4,
plot_instead_of_scree = TRUE,
#plot
which_patient = 43,
which_var_to_plot = c("sbp_sds")
)
hRELSA
plot <- hrelsa_plot(hRELSA$plot$dat, hRELSA$plot$hRELSA, levels = hRELSA$plot$levels, a = hRELSA$plot$a, plotvar = hRELSA$plot$plotvar, plotRELSA = TRUE,
myylim = c(-4, 4),  myYlim = c(0, 1), mypch = 1, mycol = "red", myXlab="days")
plot <- hrelsa_plot(hRELSA$plot$dat, hRELSA$plot$hRELSA, levels = hRELSA$plot$levels, a = hRELSA$plot$a, plotvar = hRELSA$plot$plotvar, plothRELSA = TRUE,
myylim = c(-4, 4),  myYlim = c(0, 1), mypch = 1, mycol = "red", myXlab="days")
hRELSA <- relsa_wrapper(
# input file
data_path = "data/txdata.csv",
data_seperation = ",",
data_decimal = ".",
data_sheet = NULL,
# data formation
id = "id",
treatment = "tx",
condition = "sex",
day = NULL,
form_to_day = "exam_date",
day_format = "%d%b%Y",
new_day_one = TRUE,
vars = c("sds_w", "sds_h", "sds_bmi", "sds_waist", "sds_wh_r", "sbp_sds", "dbp_sds"),
turnvars = NULL,
zvars = c("sds_w", "sds_h", "sds_bmi", "sds_waist", "sds_wh_r", "sbp_sds", "dbp_sds"),
dropvars = NULL,
# normalization
norm_ontime = 1,
baseline_day = 1,
# levels
levels = TRUE,
k = 4,
plot_instead_of_scree = TRUE,
#plot
which_patient = 43,
which_var_to_plot = c("sbp_sds")
)
hRELSA
hRELSA <- relsa_wrapper(
# input file
data_path = "data/txdata.csv",
data_seperation = ",",
data_decimal = ".",
data_sheet = NULL,
# data formation
id = "id",
treatment = "tx",
condition = "sex",
day = NULL,
form_to_day = "exam_date",
day_format = "%d%b%Y",
new_day_one = TRUE,
vars = c("sds_w", "sds_h", "sds_bmi", "sds_waist", "sds_wh_r", "sbp_sds", "dbp_sds"),
turnvars = NULL,
zvars = c("sds_w", "sds_h", "sds_bmi", "sds_waist", "sds_wh_r", "sbp_sds", "dbp_sds"),
dropvars = NULL,
# normalization
norm_ontime = 1,
baseline_day = 1,
# levels
levels = TRUE,
k = 4,
plot_instead_of_scree = FALSE,
#plot
which_patient = 43,
which_var_to_plot = c("sbp_sds")
)
library(aplot)
detach("package:aplot", unload = TRUE)
#' hRELSA Wrapper
#'
#' The \code{hrelsa_wrapper}
#'
#' @param x
#'
#' @return \code{robj}
#'
#' @import dplyr
#' @export
#'
## normthese = all variables
relsa_wrapper <- function(
# input file
data_path = NULL,
data_seperation = NULL,
data_decimal = NULL,
data_sheet = NULL,
# data formation
id = NULL,
treatment = NULL,
condition = NULL,
day = NULL,
form_to_day = NULL,
day_format = NULL,
new_day_one = NULL,
vars = NULL,
turnvars = NULL,
zvars = NULL,
dropvars = NULL,
# normalization
norm_ontime = 1,
baseline_day = 1,
# levels
levels = FALSE,
k = NULL,
plot_instead_of_scree = TRUE,
#plot
which_patient = NULL,
which_var_to_plot = NULL
){
# Searching for errors ----------------------------------------------------
abort <- FALSE
data_ending <- file_ext(data_path)
just_one_condition <- FALSE
if (is.null(treatment) || is.null(condition)) {
just_one_condition <- TRUE
}
# Warnings leading to abort
if (is.null(data_path)) {
warning("There was no data path found. Please insert your data path including
the file ending in the following way: data_path = 'example_file.csv'.
The hRELSA was not calculated.")
abort <- TRUE
}
if (!(file.exists(data_path))) {
warning("The inserted file was not found. Please insert your data path in the
following way: data_path = 'example_path'.
The hRELSA was not calculated.")
abort <- TRUE
}
if (!(data_ending %in% c("csv", "xls", "xlsx"))) {
warning("The inserted file has no csv-, xls- or xlsx-ending. A file with one
of those endings is necessairy.
The hRELSA was not calculated.")
abort <- TRUE
}
if (is.null(id)) {
warning("There was no id column name found. Please insert your id column name
in the following way: id = 'id'.
The hRELSA was not calculated.")
abort <- TRUE
}
if (is.null(treatment) && is.null(condition)) {
warning("There was neither a treatment nor a condition column name found.
Please insert at least one of them in the following way:
treatment = 'treatment'
or condition = 'condition'.
The hRELSA was not calculated.")
abort <- TRUE
}
if (is.null(day) && is.null(form_to_day)) {
warning("There was neither a day nor a column to form to a day column found.
Please insert at least one of them in the following way:
day = 'day'
or form_to_day = 'exam_date'.
The hRELSA was not calculated.")
abort <- TRUE
}
if (is.null(vars)) {
warning("There were no variable column names found. Please insert your variable column names
in the following way: vars = c('var1','var2').
The hRELSA was not calculated.")
abort <- TRUE
}
if (is.null(vars)) {
warning("There were no variable column names found. Please insert your variable column names
in the following way: vars = c('var1','var2').
The hRELSA was not calculated.")
abort <- TRUE
}
# Warnings leading to no abort
if (is.null(data_seperation) && data_ending %in% c("csv", "txt")) {
data_seperation <- ","
cat("While processing the inserted csv file the assumption that the data is
seperated with a ',' has been made.
If the file is not seperated that way, please use: data_seperation = ''.\n")
}
if (is.null(data_decimal) && data_ending %in% c("csv", "txt")) {
data_decimal <- "."
cat("While processing the inserted csv file the assumption that the data
decimal seperation is '.' has been made.
If the decimal seperation is not that way, please use: data_decimal = '.'.\n")
}
if (is.null(data_sheet) && data_ending %in% c("xls", "xlsx")) {
data_sheet <- 1
cat("While processing the inserted excel file the assumption that the data
is in sheet 1 has been made.
If the data is in another sheet, please use e.g.: data_sheet = 2.\n")
}
if (!(is.null(day)) && !(is.null(form_to_day))) {
warning("You can't form a day column if you already have one. Your own day
column has been used.")
form_to_day <- NULL
new_day_one <- NULL
}
if (is.null(new_day_one) && !(is.null(form_to_day))) {
new_day_one <- TRUE
cat("While processing the inserted time column the assumption that each
patient should get a new day one at his first time point has been made.
If only one day one at the earliest time point of the data set is wished,
please use: new_day_one = FALSE.\n")
}
if (is.null(day_format) && !(is.null(form_to_day))) {
day_format <- "%d%b%Y"
cat("While processing the inserted time column the assumption that the date
format is %d%b%Y has been made. If the format is otherwise,
please use: day_format = ''.\n")
}
if (is.null(k) && !(is.null(levels))) {
k <- 4
cat("You want the levels to be given out as well and did not stated the amount
of the k levels. While processing the levels k = 4 was used.
If wished otherwise, please use e.g.: k = 5.\n")
}
# Function code -----------------------------------------------------------
if (abort) {
} else {
if (data_ending %in% c("csv", "txt")) {
raw <- read.csv(data_path, sep = data_seperation, header = TRUE, dec = data_decimal, row.names = NULL)
} else if (data_ending == "xlsx" || data_ending == "xls") {
raw <- read_excel(data_path, sheet = data_sheet)
}
raw <- as_tibble(raw)
raw <- raw %>% clean_names
col_id <- which(names(raw) == id)
colnames(raw)[col_id] <- "id"
if (is.null(day)) {
raw <- hrelsa_days(raw, format = "day", date_format = day_format, formthis = form_to_day, newdayone = new_day_one)
day <- "day"
}
dat <- hrelsa_format(raw, id = id, treatment = treatment, condition = condition, day = day, vars = vars)
pre <- hrelsa_norm(dat, normthese = vars, zvars = zvars, ontime = norm_ontime)
bsl <- hrelsa_baselines(pre, bslday = baseline_day, vars = vars, zvars = zvars, turnvars = turnvars)
final <- hrelsa_final(pre, bsl, drop = dropvars, turnvars = turnvars, zvars = zvars)
analysis <- hrelsa_analysis(final)
if (levels) {
if (plot_instead_of_scree) {
levels_df <- hrelsa_levels(pre, bsl = bsl, drops = dropvars, turns = turnvars,
zvars = zvars,  k = k, showScree = FALSE, showPlot = TRUE)
cat("\nThe plot of the levels will be shown.")
} else {
levels_df <- hrelsa_levels(pre, bsl = bsl, drops = dropvars, turns = turnvars,
zvars = zvars,  k = k, showScree = TRUE, showPlot = FALSE)
cat("\nThe scree plot of the levels will be shown.")
}
}
ret <- list(baseline_informations = bsl,
final_hRelsa = final,
analysis = analysis)
if (levels) {
ret <- append(ret, list(levels = levels_df))
}
if (!(is.null(which_patient)) && levels) {
hRELSA <-   hrelsa(pre = pre, bsl, a = which_patient, drop = dropvars, turnvars = turnvars, zvars = zvars)
ret <- append(ret, list(plot = list(
dat = dat,
hRELSA = hRELSA,
levels = levels_df,
a = which_patient,
plotvar = which_var_to_plot
)))
}
cat("\nhRELSA calculation finished.")
return(ret)
}
}
data_sheet = "data/surgery.txt"
data_sheet = 1
data_path = "data/surgery.txt"
data_seperation = "\t"
raw <- read.csv(data_path, sep = data_seperation, header = TRUE, dec = data_decimal, row.names = NULL)
raw
head(raw)
names(raw)
raw <- as_tibble(raw)
library(tidyverse)
raw <- as_tibble(raw)
raw <- raw %>% clean_names
library(janitor)
raw <- as_tibble(raw)
raw <- raw %>% clean_names
col_id <- which(names(raw) == id)
colnames(raw)[col_id] <- "id"
raw
library(hRELSA)
dat <- hrelsa_format(raw, id = id, treatment = treatment, condition = condition, day = day, vars = vars)
raw
raw <- as_tibble(raw)
library(tidyverse)
library(janitor)
raw <- as_tibble(raw)
raw <- raw %>% clean_names
col_id <- which(names(raw) == id)
colnames(raw)[col_id] <- "id"
raw
dat <- hrelsa_format(raw, id = id, treatment = treatment, condition = condition, day = day, vars = vars)
id
c(id, treatment, condition, day, vars)
id <- "id"
treatment <- "treatment"
condition <- "condition"
day <- "day"
id = "id"
treatment = "treatment"
condition = "condition"
day = "day"
vars = c("bwc","burON", "hr", "hrv", "temp", "act")
turnvars = c("hr", "temp"),
turnvars = c("hr", "temp")
library(tidyverse)
library(janitor)
data_path = "data/surgery.txt"
data_seperation = "\t"
data_decimal = "."
raw <- read.csv(data_path, sep = data_seperation, header = TRUE, dec = data_decimal, row.names = NULL)
raw
raw <- as_tibble(raw)
raw <- raw %>% clean_names
col_id <- which(names(raw) == id)
colnames(raw)[col_id] <- "id"
raw
dat <- hrelsa_format(raw, id = id, treatment = treatment, condition = condition, day = day, vars = vars)
c(id, treatment, condition, day, vars)
(FALSE %in% (cols %in% names(dat)))
cols %in% names(dat)
cols
cols <- c(id, treatment, condition, day, vars)
cols
(FALSE %in% (cols %in% names(dat)))
names(dat)
cols %in% names(dat)
raw <- read.csv(data_path, sep = data_seperation, header = TRUE, dec = data_decimal, row.names = NULL)
raw <- as_tibble(raw)
#raw <- raw %>% clean_names
col_id <- which(names(raw) == id)
colnames(raw)[col_id] <- "id"
raw
dat <- hrelsa_format(raw, id = id, treatment = treatment, condition = condition, day = day, vars = vars)
pre <- hrelsa_norm(dat, normthese = vars, zvars = zvars, ontime = norm_ontime)
bsl <- hrelsa_baselines(pre, bslday = baseline_day, vars = vars, zvars = zvars, turnvars = turnvars)
zvars = NULL
bsl <- hrelsa_baselines(pre, bslday = baseline_day, vars = vars, zvars = zvars, turnvars = turnvars)
final <- hrelsa_final(pre, bsl, drop = dropvars, turnvars = turnvars, zvars = zvars)
library(hRELSA)
library(hRELSA)
